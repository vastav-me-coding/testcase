import os
import json
import time
import asyncio
import pandas as pd
from datetime import datetime
from sqlalchemy import text
from sqlalchemy.exc import SQLAlchemyError

from df_database_models.db_conn import get_rds_db_session, get_as400_db_session
from df_database_models.models import Line_Item, Line_Item_Type, Invoice, Source_System
from df_database_models.db_utils import generate_uuid, query_update_dict, get_record, convert_timestamps
from adf_pyutils.clm_wrapper import common_logger
from secrets_manager import get_secret

print("AS400 LineItem ETL job executing...")

# --- AWS secret configs for DB ---
rds_secret_name = os.environ["RDS_SECRETS_MANAGER_ID"]
region_name = os.environ["AWS_REGION"]
rds_host = os.environ["RDS_HOST"]
rds_db = os.environ["RDS_DB_NAME"]

session = get_rds_db_session(rds_secret_name, region_name, rds_host, rds_db)

async def log_msg(func, **kwargs):
    await asyncio.to_thread(func, **kwargs)

def call_session_engine(source_system=None, identifier=None):

    if source_system:
        rds_secret_name=os.environ["RDS_SECRETS_MANAGER_ID"]
        region_name=os.environ["AWS_REGION"]
        rds_host_nm=os.environ['RDS_HOST']

        if identifier == 'ref':
            rds_db_nm=os.environ['RDS_REF_DB_NAME']
        elif identifier == 'raw':
            rds_db_nm=os.environ['RDS_RAW_DB_NAME']
        elif identifier == 'refined':
            rds_db_nm=os.environ['RDS_REFINED_DB_NAME']
        else:
            rds_db_nm=os.environ['RDS_DB_NAME']

        if source_system.lower() == '':#Type of system to enter is as400 has types
            #Calling the as400 engine to establish a connection to PAS Source System - AS400

            as400_secret_name=os.environ["as400_aff"]#enter secret manager id
            as400_engine=get_as400_db_session(as400_secret_name, region_name)

        elif source_system.lower() == '':
            #Calling the as400 engine to establish a connection to PAS Source System - AS400
            as400_secret_name=os.environ["as400_aum"]#enter secret manager id
            as400_engine=get_as400_db_session(as400_secret_name, region_name)

        #Calling the Db session Object to establish a connection to Data Foundation Schema
        session=get_rds_db_session(rds_secret_name,region_name,rds_host_nm,rds_db_nm)

        return session, as400_engine

# --- Lookup LineItem from AS400 (replace with pyodbc/ibm_db SQL fetch) ---
def lookup_as400_lineitem(config=None, id=None):
    source_system = config['source_system']
    if source_system:
        if source_system.lower() in []:# Add source system
            df = pd.read_sql(f"""
                    SELECT DISTINCT 
                    da.customer_number || '-' || da.effective_date || '-' || cast(da.invoice_no AS varchar(10)) AS source_invoice_id
                    ,cov.BASE_PREMIUM 
                    ,cov.TAX 
                    ,da.commission_amount
                    ,CASE WHEN ds.total_discount !=0 THEN ds.total_discount
                        WHEN dis.discount_percentage !=0 THEN (cov.TOTAL_PREMIUM/dis.discount_percentage)*100 
                        ELSE COALESCE(ds.total_discount,(cov.TOTAL_PREMIUM/dis.discount_percentage)*100) END AS Discount
                    FROM 
                    (
                    (SELECT DISTINCT ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0') AS customer_number,INVOICE_NO
                    ,SUM(PREMIUM) AS premium,sum(commission_amount) AS commission_amount
                    ,CASE	WHEN length(trim(EFFECTIVE_DATE_6)) = 1 THEN NULL
                            WHEN length(trim(EFFECTIVE_DATE_6)) =  5 THEN '20'||substring(trim(EFFECTIVE_DATE_6),4,2) || '0' ||
                            substring(trim(EFFECTIVE_DATE_6),1,1) || substring(trim(EFFECTIVE_DATE_6),2,2)   
                            ELSE '20'||substring(trim(EFFECTIVE_DATE_6),5,2) || 
                            substring(trim(EFFECTIVE_DATE_6),1,2) || substring(trim(EFFECTIVE_DATE_6),3,2) 
                            END AS effective_date 
                    FROM 
                    ADGDTAPR."U.ARFILE"
                    GROUP BY ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0'),INVOICE_NO,EFFECTIVE_DATE_6
                    ) AS da
                    INNER JOIN 
                    (
                    SELECT 
                    CUSTOMER_NO,EFFECTIVE_DATE,ACCOUNT_NO,BASE_PREMIUM,TOTAL_PREMIUM,POLICY_EFF_DATE,INVOICE_NO
                    ,(STATE_TAX + TOWN_TAX + COUNTY_TAX ) AS tax ,LAST_PAYMENT_DATE
                    FROM ADGDTAPR.NSOCVGP
                    ) AS cov 
                    ON cov.CUSTOMER_NO =da.customer_number AND cov.EFFECTIVE_DATE = da.effective_date
                    AND cov.invoice_no = da.invoice_no
                    LEFT JOIN 
                    (SELECT GRCUST AS customer_no
                    ,GRDISP AS discount_percentage
                    ,GRPEFF AS effective_date
                    ,GRSEQN AS seq_no
                    FROM ADGDTAPR.HCPGRDCP) AS dis -- graduate discount
                    ON dis.customer_no = da.customer_number AND dis.effective_date = da.effective_date
                    LEFT JOIN 
                    (SELECT customer_number,cvg_effective_date AS effective_date,total_discount
                    FROM ADGDTAPR.ADGDSRP) AS ds
                    ON ds.customer_number = da.customer_number AND ds.effective_date = da.effective_date
                    ) 
                    """, con=as400_engine)
        else:
            df=None
    else:
        df=None

    if(len(df)>0):
        return df.to_dict('records')[0]
    else:
        return None


# --- Core Lambda Consumer ---
async def consume_lambda(config=None):
    try:
        asyncio.create_task(log_msg(common_logger,log_messages='consume lambda function invoking'))
        now = datetime.now()
        start_timestamp = datetime.timestamp(now)
        asyncio.create_task(log_msg(common_logger,log_messages=f'Processing to DB @ {now} | {datetime.timestamp(now)}'))
        asyncio.create_task(log_msg(common_logger,log_messages='Config',api_response=convert_timestamps(config)))
        config_dicts = config if type(config) is dict else json.loads(str(config))
        if type(config_dicts) == list:
            pass
        else:
            config_dicts = [config_dicts] # Ensure config_dicts is a list
        for config_dict in config_dicts:
            line_item_id = config_dict["line_item"]
            source_system = config_dict["source_system"]
            global session, as400_engine
            session, as400_engine = call_session_engine(source_system=source_system)

            asyncio.create_task(log_msg(common_logger, log_messages=f"Fetching line_item {line_item_id} from {source_system}"))

            as400_lineitem = lookup_as400_lineitem(line_item_id, source_system)
            if as400_lineitem:


                # --- Map Source_System ---
                source_system_record = (query.first() if (query := get_record(
                    session, model=Source_System, column_name="source_system", value=source_system)) is not None else None)
                if source_system_record:
                    as400_lineitem["df_source_system_id"] = source_system_record.df_source_system_id

                # --- Map LineItem_Type ---
                line_item_type = as400_lineitem.get("source_line_item_type")
                line_item_type_record = (query.first() if (query := get_record(
                    session, model=Line_Item_Type, column_name="line_item_type", value=line_item_type)) is not None else None)
                if line_item_type_record:
                    as400_lineitem["df_line_item_type_id"] = line_item_type_record.df_line_item_type_id

                # --- Invoice ---
                invoice_record = get_record(session, model=Invoice,
                                            column_name="source_invoice_id",
                                            value=as400_lineitem["source_invoice_id"],
                                            df_source_system_id=as400_lineitem["df_source_system_id"])
                self_invoice = invoice_record.first() if invoice_record else None

                if not self_invoice:
                    as400_lineitem["df_invoice_id"] = generate_uuid(
                        str(as400_lineitem["source_invoice_id"]) + str(as400_lineitem.get("invoice_number", "")),
                        as400_lineitem["df_source_system_id"]
                    )
                else:
                    as400_lineitem["df_invoice_id"] = self_invoice.df_invoice_id

                # --- LineItem ---
                lineitem_record = get_record(session, model=Line_Item,
                                            column_name="df_line_item_id",
                                            value=as400_lineitem["df_line_item_id"],
                                            df_source_system_id=as400_lineitem["df_source_system_id"])
                self_lineitem = lineitem_record.first() if lineitem_record else None

                if not self_lineitem:
                    session.add(Line_Item.from_dict(cls=Line_Item, d=as400_lineitem))
                    asyncio.create_task(log_msg(common_logger, log_messages=f"Inserted new LineItem {line_item_id}"))
                else:
                    self_lineitem.update(query_update_dict(obj=Line_Item, dict=as400_lineitem))
                    asyncio.create_task(log_msg(common_logger, log_messages=f"Updated LineItem {line_item_id}"))

                session.commit()
                error_log = {
                        "df_line_item_id" : id,
                        "error_message" : "No record found after lookup" 
                    }
                asyncio.create_task(log_msg(common_logger,log_messages='No record found after lookup'))
        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        asyncio.create_task(log_msg(common_logger,log_messages=f'execution_time: {end_timestamp} - {start_timestamp}'))

    except SQLAlchemyError as e:
        session.rollback()
        asyncio.create_task(log_msg(common_logger, log_messages="DB Error", api_response=str(e)))
        raise e

def handle(event, context):
    start_time = time.time()
    for record in event["Records"]:
        payload = record["body"]
        asyncio.run(consume_lambda(config=payload))
    return {"execution_time_sec": time.time() - start_time}
