import os
import json
import time
import pandas as pd
import asyncio
from datetime import datetime
from sqlalchemy.exc import SQLAlchemyError

from df_database_models.db_conn import get_rds_db_session, get_as400_db_session
from df_database_models.models import (
    Source_System,
    Additional_Interest,
    Additional_Interest_Type,
    broker_portal_error_log
)
from df_database_models.db_utils import (
    generate_uuid,
    convert_timestamps,
    query_update_dict,
    get_record
)
from secrets_manager import get_secret
from adf_pyutils.clm_wrapper import common_logger

print("Additional Interest job is executing")

async def log_msg(func, **kwargs):
    await asyncio.to_thread(func, **kwargs)

def call_session_engine(source_system=None, identifier=None):
    if source_system:
        rds_secret_name = os.environ["RDS_SECRETS_MANAGER_ID"]
        region_name = os.environ["AWS_REGION"]
        rds_host_nm = os.environ['RDS_HOST']

        if identifier == 'ref':
            rds_db_nm = os.environ['RDS_REF_DB_NAME']
        elif identifier == 'raw':
            rds_db_nm = os.environ['RDS_RAW_DB_NAME']
        elif identifier == 'refined':
            rds_db_nm = os.environ['RDS_REFINED_DB_NAME']
        else:
            rds_db_nm = os.environ['RDS_DB_NAME']

        if source_system.lower() == 'as400_aff':
            as400_secret_name = os.environ["as400_aff"]
            as400_engine = get_as400_db_session(as400_secret_name, region_name)

        elif source_system.lower() == 'as400_aum':
            as400_secret_name = os.environ["as400_aum"]
            as400_engine = get_as400_db_session(as400_secret_name, region_name)

        # DF session
        session = get_rds_db_session(rds_secret_name, region_name, rds_host_nm, rds_db_nm)
        return session, as400_engine

def lookup_as400(config=None, id=None):
    source_system = config['source_system']
    if source_system:
        if source_system.lower() in ['as400_aff','as400_aum']:
            df = pd.read_sql(f"""
                Add Query
            """, con=as400_engine)
        else:
            df = None
    else:
        df = None

    if df is not None and len(df) > 0:
        return df.to_dict('records')[0]
    else:
        return None

async def consume_lambda(config=None):
    asyncio.create_task(log_msg(common_logger, log_messages='consume additional interest lambda invoked'))
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)
    asyncio.create_task(log_msg(common_logger, log_messages=f'Processing to DB @ {now} | {datetime.timestamp(now)}'))

    try:
        asyncio.create_task(log_msg(common_logger, log_messages='Config', api_response=convert_timestamps(config)))
        config_dicts = config if isinstance(config, dict) else json.loads(str(config))
        if not isinstance(config_dicts, list):
            config_dicts = [config_dicts]

        for config_dict in config_dicts:
            ai_id = config_dict['Additional_Interest']
            source_system = config_dict['source_system'].lower()

            if ai_id:
                print("Calling call_session_engine Function")
                global session, as400_engine
                session, as400_engine = call_session_engine(source_system=source_system)

                as400_ai_dict = lookup_as400(config_dict, ai_id)

                if as400_ai_dict:
                    asyncio.create_task(log_msg(common_logger, log_messages=f'Initial {source_system} Additional Interest dict:', api_response=convert_timestamps(as400_ai_dict)))

                    # Source System FK
                    source_system_record = (query.first() if (query := get_record(session, model=Source_System, column_name='source_system', value=source_system)) is not None else None)
                    if source_system_record:
                        as400_ai_dict['df_source_system_id'] = source_system_record.df_source_system_id

                    # Additional Interest Type FK
                    ai_type_record = (query.first() if (query := get_record(session, model=Additional_Interest_Type, column_name='source_additional_interest_type', value=as400_ai_dict['source_additional_interest_type'])) is not None else None)
                    if ai_type_record:
                        as400_ai_dict['df_additional_interest_type_id'] = ai_type_record.df_additional_interest_type_id

                    # Insert/Update
                    ai_record = (query.first() if (query := get_record(session, model=Additional_Interest, column_name='df_additional_interest_id', value=ai_id)) is not None else None)
                    if ai_record is None:
                        as400_ai_dict['df_additional_interest_id'] = generate_uuid(str(ai_id) + source_system)
                        session.add(Additional_Interest.from_dict(cls=Additional_Interest, d=as400_ai_dict))
                        session.commit()
                        asyncio.create_task(log_msg(common_logger, log_messages=f'Inserted Additional Interest {ai_id}'))
                    else:
                        ai_record.update(query_update_dict(obj=Additional_Interest, dict=as400_ai_dict))
                        session.commit()
                        asyncio.create_task(log_msg(common_logger, log_messages=f'Updated Additional Interest {ai_id}'))
                else:
                    error_log = {
                        "df_additional_interest_id": ai_id,
                        "error_message": "No record found after lookup"
                    }
                    asyncio.create_task(log_msg(common_logger, log_messages='No record found after lookup', api_response=error_log))

        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        asyncio.create_task(log_msg(common_logger, log_messages=f'execution_time: {end_timestamp} - {start_timestamp}'))

    except SQLAlchemyError as e:
        asyncio.create_task(log_msg(common_logger, log_messages='Error', api_response=e))
        session.rollback()
        raise e

def handle(event, context):
    start_time = time.time()
    print("Handle function is called")
    for record in event['Records']:
        payload = record["body"]
        asyncio.run(consume_lambda(config=payload))
    end_time = time.time()
    return {"execution_time_sec": end_time - start_time}

if __name__ == '__main__':
    handle({"Records": [{"body": '{ "Additional_Interest": "AI12345", "source_system": "as400_aff", "name": "Mortgage Holder" }'}]}, None)
