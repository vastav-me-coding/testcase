import os
import logging
import json
import time
import requests
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import func, and_,select, BIGINT, create_engine, Column, update, Integer, cast, String, MetaData, DateTime, Float, Text, DECIMAL, TIMESTAMP, text
from sqlalchemy.orm import Session, declarative_base
from df_database_models.db_conn import get_rds_db_session, get_aumine_db_session
from df_database_models.db_conn import *
from df_database_models.models import Agency, Customer, Agency_Contact, Customer_Contact, Policy, Source_System, Policy_Status, Transaction, Transaction_Type, Policy_Number_Version
from df_database_models.db_utils import  generate_uuid, convert_timestamps, query_update_dict, policy_version_increment, latest_policy_version, latest_transaction_id, get_record, multi_filter_get_record, push_msg_to_sqs, call_sp
from df_database_models.db_utils import *
from df_database_models.db_lookup import generic_product_lookup
from secrets_manager import get_secret
from datetime import datetime
import pandas as pd
import asyncio
from adf_pyutils.clm_wrapper import common_logger, generate_response_log_details

logger = logging.getLogger()
logger.setLevel(logging.INFO)

pnc_db = os.environ['RDS_DB_NAME']
ref_db = os.environ['RDS_REF_DB_NAME']
mdm_raw_db = os.environ['RDS_RAW_DB_NAME']
mdm_refined_db = os.environ['RDS_REFINED_DB_NAME']

## Fetch SQS producer Parameters from aws secret manager

async def log_msg(func,**kwargs):
    await asyncio.to_thread(func,**kwargs)

def msg_to_sqs(source_system=None, identifier=None, id=None):
    if identifier:
        Json_payload = {}
        sqs_queue_prefix = os.environ["SQS_APP_PREFIX"]

        if identifier ==  'Agency':            
            sqs_queue_suffix = os.environ["SQS_AGENCY_SUFFIX"]
            Json_payload["source_agency_id"] = id

        elif identifier ==  'Agency_Contact':
            sqs_queue_suffix = os.environ["SQS_AGENCYCONTACT_SUFFIX"]
            Json_payload["source_agency_contact_id"] = id

        elif identifier ==  'Customer':
            sqs_queue_suffix = os.environ["SQS_CUSTOMER_SUFFIX"]
            Json_payload["source_customer_id"] = id

        elif identifier ==  'Customer_Contact':
            sqs_queue_suffix = os.environ["SQS_CUSTOMERCONTACT_SUFFIX"]
            Json_payload["source_customer_contact_id"] = id

        elif identifier ==  'Mdm_Customer_Sub_Xref':
            sqs_queue_suffix = os.environ["SQS_CUSTOMER_SUB_XREF_SUFFIX"]
            Json_payload = id

        Json_payload['source_system'] = source_system
        queue_name = sqs_queue_prefix+'-'+sqs_queue_suffix

        try:
            response = push_msg_to_sqs(queue_name, Json_payload)
            asyncio.create_task(log_msg(common_logger,log_messages=f'-- Push message to Queue: {queue_name} is success with response code -- {response}'))

        except Exception as e:
            asyncio.create_task(log_msg(common_logger,log_messages=f'-- Push message to Queue: {queue_name} is failed with response code -- {response} -- {e}'))


def init_sp(source_system=None, identifier=None, id=None):
    if identifier:
        sqs_producer_secret = json.loads(get_secret(
                secret_name=os.environ["SQS_PRODUCER_SECRET_ID"], region_name=os.environ["AWS_REGION"]))
        sqs_producer_access_key = sqs_producer_secret["access_key"]

        json_payload = {}

        if identifier ==  'Agency':
            sqs_producer_url = os.environ["SQS_MDM_AGENCY_URL"]
            json_payload["source_agency_id"] = id

        elif identifier ==  'Agency_Contact':
            sqs_producer_url = os.environ["SQS_MDM_AGENCY_CONTACT_URL"]
            json_payload["source_agency_contact_id"] = id

        elif identifier ==  'Customer':
            sqs_producer_url = os.environ["SQS_MDM_CUSTOMER_URL"]
            json_payload["source_customer_id"] = id

        elif identifier ==  'Customer_Contact':
            sqs_producer_url = os.environ["SQS_MDM_CUSTOMER_CONTACT_URL"]
            json_payload["source_customer_contact_id"] = id

        elif identifier ==  'Mdm_Customer_Sub_Xref':
            sqs_producer_url = os.environ["SQS_MDM_CUSTOMER_SUB_XREF_URL"]
            json_payload = id

        json_payload['source_system'] = source_system
        try:
            response = call_sp(sqs_producer_url,sqs_producer_access_key, json_payload)
            if str(response) == 200:
                asyncio.create_task(log_msg(common_logger,log_messages=f'-- Calling to Producer API URL: {sqs_producer_url} was success -- {response}'))

        except Exception as e:
            asyncio.create_task(log_msg(common_logger,log_messages=f'-- Calling to Producer API URL : {sqs_producer_url} was failed -- {e}'))

def call_session_engine(source_system=None, database_name=None):

    aumine_engine = None
    session = None
    if database_name:
        
        rds_secret_name=os.environ["RDS_SECRETS_MANAGER_ID"]
        region_name=os.environ["AWS_REGION"]
        rds_host_nm=os.environ['RDS_HOST']

        #Calling the Db session Object to establish a connection to Data Foundation Schema
        session=get_rds_db_session(rds_secret_name,region_name,rds_host_nm,database_name)
        return session
            
    if source_system:
        region_name=os.environ["AWS_REGION"]
        if source_system.lower() == 'aumine_aff':
            #Calling the Aumine engine to establish a connection to PAS Source System - Aumine_AFF
            aumine_secret_name=os.environ["AUMINE_AFF_SECRETS_MANAGER_ID"]
            aumine_engine=get_aumine_db_session(aumine_secret_name, region_name)

        elif source_system.lower() == 'aumine_aum':
            #Calling the Aumine engine to establish a connection to PAS Source System - Aumine_AUM
            aumine_secret_name=os.environ["AUMINE_AUM_SECRETS_MANAGER_ID"]
            aumine_engine=get_aumine_db_session(aumine_secret_name, region_name)

        elif source_system.lower() == 'unqork':
             aumine_engine = None
        
        return aumine_engine

# lookup into aumine aff
def lookup_aumine(config=None, id=None):
    source_system = config['source_system']
    if source_system:
        if source_system.lower() == 'aumine_aff':
            df = pd.read_sql(f"""
                    SELECT DISTINCT 
                    null as df_policy_id
                    ,p.POLICY AS source_transaction_id
                    ,p.POLICY_NUMBER AS policy_number
                    ,p.PREV_POLICY AS previous_source_policy_id
                    ,CASE 
                             WHEN SHORT_DESCRIPTION = 'Renewal Of' THEN COALESCE(prevpol.RELATED_POLICY_ID,p.PREV_POLICY_NO)  
                             ELSE p.PREV_POLICY_NO END AS previous_policy_number
                    ,Case when lower(p.POLICY_STATUS) in ('policy') then 'Active'	
                            When lower(p.POLICY_STATUS) in ('cancelled', 'void', 'voided') then 'Terminated'
                            When lower(p.POLICY_STATUS) in ('new', 'open', 'bound') then 'Pending'  
                        ELSE 'Terminated' END AS policy_status
                    ,p.POLICY_STATUS AS source_policy_status
                    ,null AS df_agency_id
                    ,null AS df_agency_contact_id
                    ,null AS df_customer_id
                    ,null AS df_customer_contact_id
                    ,p.ENDORSEMENT_NUMBER AS sequence_id
                    ,p.ENDORSES as endorses
                    ,CASE WHEN lower(p.transaction_type) = 'new' 
							and (lower(p.endorsement_type) is null or 
                            (lower(p.endorsement_type) NOT LIKE '%cancel%' and lower(p.endorsement_type) not like '%reinstatement%')) THEN 'New Business'
						 WHEN lower(p.transaction_type) = 'new' 
							and lower(p.endorsement_type) like '%cancel%' 
                            and lower(p.endorsement_type) not like '%cancel/rewrite%'  THEN 'Cancellation'	
						 WHEN lower(p.transaction_type) = 'new' 
							and lower(p.endorsement_type) like '%cancel/rewrite%'  THEN 'Cancel/Rewrite'	
                        WHEN lower(p.transaction_type) = 'new' 
							and lower(p.endorsement_type) like '%reinstatement%'  THEN 'ReInstatement'                            
                        WHEN lower(p.transaction_type) = 'renewal' 
                            and (p.endorsement_type is null) THEN 'Renewal'
                        WHEN lower(p.transaction_type) = 'renewal' and lower(p.endorsement_type) like '%endorse%' THEN 'Endorsement'
                        WHEN lower(p.transaction_type) = 'renewal' and  lower(p.endorsement_type) like '%cancel%' 
                            and lower(p.endorsement_type) not like '%cancel/rewrite%' THEN 'Cancellation'
                        WHEN lower(p.transaction_type) = 'renewal'  and lower(p.endorsement_type) like '%reinstatement%' THEN 'ReInstatement'
                        WHEN lower(p.transaction_type) = 'renewal' and lower(p.endorsement_type) like '%cancel/rewrite%' THEN 'Cancel/Rewrite'
                        WHEN lower(p.transaction_type) = 'renewal' and (lower(p.endorsement_type) not like '%cancel/rewrite%' or 
                        lower(p.endorsement_type) like '%cancel%' or lower(p.endorsement_type) like '%reinstatement%' or 
                        lower(p.endorsement_type) like '%endorse%') THEN 'Renewal'
                        ELSE NULL END AS transaction_type
                    ,p.transaction_type as source_transaction_type
                    ,p.FIRST_MODIFIED AS transaction_date
                    ,ppt.POLICY_TYPE_NAME
                    ,ppt.PROGRAM
                    ,C.COMPANY_ABBR_NAME
                    ,CASE WHEN lower(p.filing_status) = 'surplus' then 1 
                    when lower(p.filing_status) in ('all','admitted') then 0 
                    ELSE null END AS is_surplus_lines
                    ,bp.RETAIL_BROKER AS source_agency_id 
                    ,bpc.RETAIL_BROKER_CONTACT AS source_agency_contact_id
                    ,I.INSURED AS source_customer_id
                    ,IC.INSURED_CONTACT  as source_customer_contact_id
                    ,p.EFFECTIVE_DATE AS effective_date
                    ,p.EXPIRATION_DATE AS expiration_date
                    ,CASE WHEN  lower(p.transaction_type) = 'new' 
                        and (lower(p.endorsement_type) is null or lower(p.endorsement_type) NOT LIKE '%cancel%')
                        THEN p.first_modified ELSE p.first_modified END AS policy_issue_date
                        FROM AuMine.policy p
                        INNER JOIN AuMine.Company C ON C.COMPANY = p.COMPANY
                        INNER JOIN AuMine.Submission S ON S.SUBMISSION = p.SUBMISSION
                        INNER JOIN AuMine.Insured I ON S.insured = I.insured   
                        INNER JOIN AuMine.BUSINESS_PARTNER bp ON bp.BUSINESS_PARTNER = p.CLIENT
                        INNER JOIN AuMine.PROGRAM_POLICY_TYPE ppt ON p.PROGRAM_POLICY_TYPE = ppt.PROGRAM_POLICY_TYPE
                        INNER JOIN AuMine.PROGRAM p2 ON p2.PROGRAM = ppt.PROGRAM
                        LEFT JOIN AuMine.Insured_CONTACT IC ON I.insured = IC.insured
                        LEFT JOIN AuMine.POLICY_LOCATION pl ON pl.POLICY = p.POLICY AND pl.primary_location = 1
                        LEFT JOIN AuMine.BUSINESS_PARTNER_CONTACT bpc ON p.CLIENT_CONTACT = bpc.business_partner_contact
                        LEFT JOIN AuMine.POLICY_RELATIONSHIP prevpol ON prevpol.policy = p.POLICY
                        LEFT JOIN 
                             (select * from AuMine.RELATIONSHIP_TYPE where SHORT_DESCRIPTION = 'Renewal Of') rt ON prevpol.RELATIONSHIP_TYPE = rt.RELATIONSHIP_TYPE
                    WHERE p.POLICY_NUMBER != 'TBD'
                    and prevpol.RELATIONSHIP_TYPE is not null AND p.policy =  {id}
                """, con=aumine_engine)
            
        elif source_system.lower() == 'aumine_aum':
            df = pd.read_sql(f"""
                    SELECT DISTINCT 
                    null as df_policy_id
                    ,p.POLICY AS source_transaction_id
                    ,p.POLICY_NUMBER AS policy_number
                    ,p.PREV_POLICY AS previous_source_policy_id
                    ,CASE 
                             WHEN SHORT_DESCRIPTION = 'Renewal Of' THEN COALESCE(prevpol.RELATED_POLICY_ID,p.PREV_POLICY_NO)  
                             ELSE p.PREV_POLICY_NO END AS previous_policy_number
                    ,Case when lower(p.POLICY_STATUS) in ('policy') then 'Active'	
                            When lower(p.POLICY_STATUS) in ('cancelled', 'void', 'voided') then 'Terminated'
                            When lower(p.POLICY_STATUS) in ('new', 'open', 'bound') then 'Pending'  
                        ELSE 'Terminated' END AS policy_status
                    ,p.POLICY_STATUS AS source_policy_status
                    ,null AS df_agency_id
                    ,null AS df_agency_contact_id
                    ,null AS df_customer_id
                    ,null AS df_customer_contact_id
                    ,p.ENDORSEMENT_NUMBER AS sequence_id
                    ,p.ENDORSES as endorses
                    ,CASE WHEN lower(p.transaction_type) = 'new' 
							and (lower(p.endorsement_type) is null or 
                            (lower(p.endorsement_type) NOT LIKE '%cancel%' and lower(p.endorsement_type) not like '%reinstatement%')) THEN 'New Business'
						 WHEN lower(p.transaction_type) = 'new' 
							and lower(p.endorsement_type) like '%cancel%' 
                            and lower(p.endorsement_type) not like '%cancel/rewrite%'  THEN 'Cancellation'	
						 WHEN lower(p.transaction_type) = 'new' 
							and lower(p.endorsement_type) like '%cancel/rewrite%'  THEN 'Cancel/Rewrite'	
                        WHEN lower(p.transaction_type) = 'new' 
							and lower(p.endorsement_type) like '%reinstatement%'  THEN 'ReInstatement'                            
                        WHEN lower(p.transaction_type) = 'renewal' 
                            and (p.endorsement_type is null) THEN 'Renewal'
                        WHEN lower(p.transaction_type) = 'renewal' and lower(p.endorsement_type) like '%endorse%' THEN 'Endorsement'
                        WHEN lower(p.transaction_type) = 'renewal' and  lower(p.endorsement_type) like '%cancel%' 
                            and lower(p.endorsement_type) not like '%cancel/rewrite%' THEN 'Cancellation'
                        WHEN lower(p.transaction_type) = 'renewal'  and lower(p.endorsement_type) like '%reinstatement%' THEN 'ReInstatement'
                        WHEN lower(p.transaction_type) = 'renewal' and lower(p.endorsement_type) like '%cancel/rewrite%' THEN 'Cancel/Rewrite'
                        WHEN lower(p.transaction_type) = 'renewal' and (lower(p.endorsement_type) not like '%cancel/rewrite%' or 
                        lower(p.endorsement_type) like '%cancel%' or lower(p.endorsement_type) like '%reinstatement%' or 
                        lower(p.endorsement_type) like '%endorse%') THEN 'Renewal'
                        ELSE NULL END AS transaction_type
                    ,p.transaction_type as source_transaction_type
                    ,p.FIRST_MODIFIED AS transaction_date
                    ,ppt.POLICY_TYPE_NAME
                    ,ppt.PROGRAM
                    ,C.COMPANY_ABBR_NAME
                    ,CASE WHEN lower(p.filing_status) = 'surplus' then 1 
                    when lower(p.filing_status) in ('all','admitted') then 0 
                    ELSE null END AS is_surplus_lines
                    ,bp.RETAIL_BROKER AS source_agency_id 
                    ,bpc.RETAIL_BROKER_CONTACT AS source_agency_contact_id
                    ,I.INSURED AS source_customer_id
                    ,IC.INSURED_CONTACT  as source_customer_contact_id
                    ,p.EFFECTIVE_DATE AS effective_date
                    ,p.EXPIRATION_DATE AS expiration_date
                    ,CASE WHEN  lower(p.transaction_type) = 'new' 
                        and (lower(p.endorsement_type) is null or lower(p.endorsement_type) NOT LIKE '%cancel%')
                        THEN p.first_modified ELSE p.first_modified END AS policy_issue_date
                        FROM AuMine.policy p
                        INNER JOIN AuMine.Company C ON C.COMPANY = p.COMPANY
                        INNER JOIN AuMine.Submission S ON S.SUBMISSION = p.SUBMISSION
                        INNER JOIN AuMine.Insured I ON S.insured = I.insured
                        INNER JOIN AuMine.BUSINESS_PARTNER bp ON bp.BUSINESS_PARTNER = p.CLIENT
                        INNER JOIN AuMine.PROGRAM_POLICY_TYPE ppt ON p.PROGRAM_POLICY_TYPE = ppt.PROGRAM_POLICY_TYPE
                        INNER JOIN AuMine.PROGRAM p2 ON p2.PROGRAM = ppt.PROGRAM
                        LEFT JOIN AuMine.Insured_CONTACT IC ON I.insured = IC.insured
                        LEFT JOIN AuMine.POLICY_LOCATION pl ON pl.POLICY = p.POLICY AND pl.primary_location = 1
                        LEFT JOIN AuMine.BUSINESS_PARTNER_CONTACT bpc ON p.CLIENT_CONTACT = bpc.business_partner_contact
                        LEFT JOIN AuMine.POLICY_RELATIONSHIP prevpol ON prevpol.policy = p.POLICY
                        LEFT JOIN 
                             (select * from AuMine.RELATIONSHIP_TYPE where SHORT_DESCRIPTION = 'Renewal Of') rt ON prevpol.RELATIONSHIP_TYPE = rt.RELATIONSHIP_TYPE
                        WHERE p.POLICY_NUMBER != 'TBD'  AND p.policy =  {id}
                """, con=aumine_engine)
    else:
        df=None

    if(len(df)>0):
        return df.to_dict('records')[0]
    else:
        return None

async def consume_lambda(config=None):
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)
    asyncio.create_task(log_msg(common_logger,log_messages=f'Processing to DB @ {now} | {datetime.timestamp(now)}'))
    try:
        logger.info(config)
        config_dicts = config if type(config) is dict else json.loads(str(config))
        if type(config_dicts) == list:
            pass
        else:
            config_dicts = [config_dicts]
        for config_dict in config_dicts:
            id = config_dict['source_policy_id']
            source_system = config_dict['source_system'].lower()
            asyncio.create_task(log_msg(common_logger,log_messages=f'Handle function is Invoking for Policy {source_system} System'))    
            if(id):
                fk_flag = 1
                print("Calling call_session_engine Function ")
                global session, aumine_engine
                aumine_engine = call_session_engine(source_system=source_system)
                session = call_session_engine(database_name=pnc_db)

                aumine_policy_summary_dict = lookup_aumine(config=config_dict, id=id)
                if(aumine_policy_summary_dict):
                    #asyncio.create_task(log_msg(common_logger,log_messages=f'Initial {source_system} Policy Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                    
                    ## Fetch Source SyStem Id from Data Foundation
                    aumine_policy_summary_dict['source_system'] = source_system
                    policy_status = aumine_policy_summary_dict.get("policy_status")
                    transaction_type = aumine_policy_summary_dict.get("transaction_type")
                    source_transaction_id = aumine_policy_summary_dict.get("source_transaction_id")
                    source_system_record = (query.first() if (query := multi_filter_get_record(session,model=Source_System,source_system=source_system)) is not None else None)
                    policy_status_record = (query.first() if (query := multi_filter_get_record(session,model=Policy_Status,policy_status=policy_status)) is not None else None)                   
                    transaction_type_record = (query.first() if (query := multi_filter_get_record(session,model=Transaction_Type,transaction_type=transaction_type)) is not None else None)

                    if source_system_record:
                        aumine_policy_summary_dict['df_source_system_id'] = source_system_record.df_source_system_id
                    if policy_status_record:
                        aumine_policy_summary_dict['df_policy_status_id'] = policy_status_record.df_policy_status_id
                    if transaction_type_record:
                        aumine_policy_summary_dict['df_transaction_type_id'] = transaction_type_record.df_transaction_type_id

                    #Assign a variable to prev_policy_no,source_system_id  and source_transaction_type from Dictionary Object
                    previous_policy_number = aumine_policy_summary_dict.get("previous_policy_number")                  
                    df_source_system_id = aumine_policy_summary_dict.get("df_source_system_id")
                    source_transaction_type = aumine_policy_summary_dict.get("source_transaction_type")
                    current_policy_number = aumine_policy_summary_dict.get("policy_number")
                    sequence_id = aumine_policy_summary_dict.get("sequence_id")
                    endorses = aumine_policy_summary_dict.get("endorses")
                    aumine_policy_summary_dict['parent_policy_number'] = None

                    if source_transaction_type != 'New':
                        #transaction_record = get(entity=Transaction,policy_number=previous_policy_number, df_source_system_id=df_source_system_id).first()
                        if previous_policy_number:
                            policy_version_row = (query.first() if (query := multi_filter_get_record(session,model=Policy_Number_Version,policy_number=previous_policy_number)) is not None else None)
                            if policy_version_row:
                                df_policy_id = policy_version_row.df_policy_id
                                df_policy_record = (query.first() if (query := multi_filter_get_record(session,model=Policy,df_policy_id=df_policy_id, df_source_system_id=df_source_system_id)) is not None else None)
                                if df_policy_record:
                                    aumine_policy_summary_dict['parent_policy_number'] = df_policy_record.policy_number
                        elif previous_policy_number is None and (sequence_id is None and endorses is None) :
                            aumine_policy_summary_dict['parent_policy_number'] = aumine_policy_summary_dict.get("policy_number")
                    else:
                        aumine_policy_summary_dict['parent_policy_number'] = aumine_policy_summary_dict.get("policy_number") 

                    asyncio.create_task(log_msg(common_logger,log_messages=f'Transactional {source_system} Policy Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                    
                    if aumine_policy_summary_dict['parent_policy_number'] is None:
                        aumine_policy_summary_dict['parent_policy_number'] = aumine_policy_summary_dict.get("policy_number")

                    #Assign a variable to Policy_number,Agency_id and Customer_id from Dictionary Object
                    parent_policy_number = aumine_policy_summary_dict.get("parent_policy_number")  
                    source_agency_id = aumine_policy_summary_dict.get("source_agency_id")
                    source_agency_contact_id = aumine_policy_summary_dict.get("source_agency_contact_id")
                    source_customer_id = aumine_policy_summary_dict.get("source_customer_id")
                    source_customer_contact_id = aumine_policy_summary_dict.get("source_customer_contact_id")              

                    #Fetch policy_number Agency_id and Customer_id from Data Foundation
                    policy_record = multi_filter_get_record(session,model=Policy,policy_number=parent_policy_number,df_source_system_id=df_source_system_id)
                    source_transaction_record = multi_filter_get_record(session,model=Transaction,source_transaction_id=source_transaction_id, df_source_system_id=df_source_system_id)
                    policy_version_record = multi_filter_get_record(session,model=Policy_Number_Version,policy_number=current_policy_number)
                    agency_record = (query.first() if (query := multi_filter_get_record(session,model=Agency,source_agency_id=source_agency_id, df_source_system_id=df_source_system_id)) is not None else None)
                    agency_contact_record = (query.first() if (query := multi_filter_get_record(session,model=Agency_Contact,source_agency_contact_id=source_agency_contact_id, df_source_system_id=df_source_system_id)) is not None else None)
                    customer_record = (query.first() if (query := multi_filter_get_record(session,model=Customer,source_customer_id=source_customer_id, df_source_system_id=df_source_system_id)) is not None else None)
                    customer_contact_record = (query.first() if (query := multi_filter_get_record(session,model=Customer_Contact,source_customer_contact_id=source_customer_contact_id, df_source_system_id=df_source_system_id)) is not None else None)
                     
                    self_policy = (policy_record.first() if policy_record is not None else None)
                    self_transaction = (source_transaction_record.first() if source_transaction_record is not None else None)
                    self_policy_version = (policy_version_record.first() if policy_version_record is not None else None)
                    # session.commit() 
                    asyncio.create_task(log_msg(common_logger,log_messages=f'self policy - {self_policy}'))
                    asyncio.create_task(log_msg(common_logger,log_messages=f'Changed {source_system} Policy Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))

                    if agency_record:
                        asyncio.create_task(log_msg(common_logger,log_messages=f' Found Valid Agency Record from Agency entity : {agency_record}'))
                        aumine_policy_summary_dict['df_agency_id'] = agency_record.df_agency_id                            
                    else:
                        if source_agency_id is not None:
                            asyncio.create_task(log_msg(common_logger,log_messages=f'source_agency_id contains a valid value : {source_agency_id}'))
                            aumine_policy_summary_dict['df_agency_id'] = generate_uuid(str(source_agency_id or ''), 
                                                                                        str(df_source_system_id))
                            session.add(Agency.from_dict(cls=Agency, d=aumine_policy_summary_dict))
                            session.commit()

                            #init_sp(source_system=source_system,identifier='Agency', id=source_agency_id)

                    if agency_contact_record:
                        asyncio.create_task(log_msg(common_logger,log_messages=f' Found Valid Agency Contact Record from Agency_Contact entity : {agency_contact_record}'))
                        aumine_policy_summary_dict['df_agency_contact_id'] = agency_contact_record.df_agency_contact_id
                    else:
                        if source_agency_contact_id is not None:
                            asyncio.create_task(log_msg(common_logger,log_messages=f'source_agency_contact_id contains a valid value : {source_agency_contact_id}'))
                            aumine_policy_summary_dict['df_agency_contact_id'] = generate_uuid(str(source_agency_contact_id or ''),
                                                                                                str(df_source_system_id))
                            session.add(Agency_Contact.from_dict(cls=Agency_Contact, d=aumine_policy_summary_dict))
                            session.commit()
                            #init_sp(source_system=source_system,identifier='Agency_Contact', id=source_agency_contact_id)

                    if customer_record:
                        asyncio.create_task(log_msg(common_logger,log_messages=f' Found Valid Customer Record from Customer entity : {customer_record}'))
                        aumine_policy_summary_dict['df_customer_id'] = customer_record.df_customer_id
                    else:
                        if source_customer_id is not None:
                            asyncio.create_task(log_msg(common_logger,log_messages=f'source_customer_id contains a valid value : {source_customer_id}'))
                            aumine_policy_summary_dict['df_customer_id'] = generate_uuid(str(source_customer_id or ''),
                                                                                            str(df_source_system_id))
                            session.add(Customer.from_dict(cls=Customer, d=aumine_policy_summary_dict))
                            session.commit()
                            asyncio.create_task(log_msg(common_logger,log_messages=f'Successfully inserted record into Customer Data Foundation Entity : {source_customer_id}'))
                            #init_sp(source_system=source_system,identifier='Customer', id=source_customer_id)
                    
                    if customer_contact_record:
                        asyncio.create_task(log_msg(common_logger,log_messages=f' Found Valid Customer Contact Record from Customer Contact entity : {customer_contact_record}'))
                        aumine_policy_summary_dict['df_customer_contact_id'] = customer_contact_record.df_customer_contact_id
                    else:
                        if source_customer_contact_id is not None:
                            asyncio.create_task(log_msg(common_logger,log_messages=f'source_customer_contact_id contains a valid value : {source_customer_contact_id}'))
                            aumine_policy_summary_dict['df_customer_contact_id'] = generate_uuid(str(source_customer_contact_id or ''),
                                                                                            str(df_source_system_id))
                            session.add(Customer_Contact.from_dict(cls=Customer_Contact, d=aumine_policy_summary_dict))
                            session.commit()
                            asyncio.create_task(log_msg(common_logger,log_messages=f'Successfully inserted record into Customer_Contact Data Foundation Entity : {source_customer_id}'))
                            
                            #init_sp(source_system=source_system,identifier='Customer_Contact', id=source_customer_contact_id)                    
                                       
                    if(self_policy is None):
                        asyncio.create_task(log_msg(common_logger,log_messages=f"no policy was found in Data Foundation Schema"))
                        aumine_policy_summary_dict['df_policy_id'] = generate_uuid(parent_policy_number, str(df_source_system_id))

                        #Fetching product_id by matching with policy_id and business unit
                        aumine_product_summary_dict = generic_product_lookup(aumine_conn_str=aumine_engine,source_system=source_system,p_id=id)
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Changed {source_system} Product Summary dict:',api_response=convert_timestamps(aumine_product_summary_dict)))
                        if aumine_product_summary_dict:
                            if aumine_product_summary_dict.get("product_id"):
                                aumine_policy_summary_dict['product_id'] = aumine_product_summary_dict.get("product_id")
                            else:
                                asyncio.create_task(log_msg(common_logger,log_messages=f" -- No Product ID Found -> populate default Product UUID value -- "))
                                aumine_policy_summary_dict['product_id'] = generate_uuid(str(''), str(df_source_system_id))
                                #aumine_policy_summary_dict['product_id'] = None                            
                                #fk_flag = 0
                        else:
                            asyncio.create_task(log_msg(common_logger,log_messages=f" -- No Product ID Found -> populate default Product UUID value --- "))
                            aumine_policy_summary_dict['product_id'] = generate_uuid(str(''), str(df_source_system_id))
                            #aumine_policy_summary_dict['product_id'] = None                            
                            #fk_flag = 0

                        asyncio.create_task(log_msg(common_logger,log_messages=f'Insert {source_system} Policy Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                        print(f"Insert {source_system} Policy Summary dict: {aumine_policy_summary_dict}")
                        if fk_flag==0:
                            session.execute(text("SET FOREIGN_KEY_CHECKS = 0;"))
                            asyncio.create_task(log_msg(common_logger,log_messages='FK disabled'))

                        session.add(Policy.from_dict(cls=Policy, d=aumine_policy_summary_dict))
                        session.commit()

                        if fk_flag==0:
                            session.execute(text("SET FOREIGN_KEY_CHECKS = 1;"))
                            asyncio.create_task(log_msg(common_logger,log_messages='FK Enabled'))
                            session.commit()
                            fk_flag = 1
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Inserted Policy data to  Data Foundation DB @ {now} | {datetime.timestamp(now)}'))

                    elif(self_policy is not None):
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- Policy exists in Data foundation schema -- "))
                        aumine_policy_summary_dict['df_policy_id'] = self_policy.df_policy_id
                        aumine_policy_summary_dict['product_id'] = self_policy.product_id
                        #aumine_policy_summary_dict['df_agency_contact_id'] = self_policy.df_agency_contact_id
                        #aumine_policy_summary_dict['df_customer_id'] = self_policy.df_customer_id
                        #aumine_policy_summary_dict['df_customer_contact_id'] = self_policy.df_customer_contact_id
                        #aumine_policy_summary_dict['df_agency_id'] = self_policy.df_agency_id
                        aumine_policy_summary_dict['policy_number'] = self_policy.policy_number
                        aumine_policy_summary_dict['policy_issue_date'] = str(self_policy.policy_issue_date) if self_policy.policy_issue_date is not None else None

                  
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Updated {source_system} Policy Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                        policy_record.update(query_update_dict(obj=Policy, dict=aumine_policy_summary_dict))
                        session.commit()
                        asyncio.create_task(log_msg(common_logger,log_messages=f' -- Updated Policy data to Data Foundation DB @ {now} | {datetime.timestamp(now)} -- ')) 
                                             
                    if self_transaction is None:
                        fk_flag=0
                        asyncio.create_task(log_msg(common_logger,log_messages=f"no Policy Transactional record was found in Data Foundation Schema"))
                        aumine_policy_summary_dict['df_transaction_id'] = generate_uuid(str(source_transaction_id or '') +
                                                                                        str(parent_policy_number or '') ,
                                                                                    str(df_source_system_id))                                                
                        if fk_flag==0:
                            session.execute(text("SET FOREIGN_KEY_CHECKS = 0;"))
                            asyncio.create_task(log_msg(common_logger,log_messages='FK disabled'))

                        session.add(Transaction.from_dict(cls=Transaction, d=aumine_policy_summary_dict))
                        session.commit()

                        if fk_flag==0:
                            session.execute(text("SET FOREIGN_KEY_CHECKS = 1;"))
                            asyncio.create_task(log_msg(common_logger,log_messages='FK Enabled'))
                            session.commit()
                            fk_flag = 1
                        asyncio.create_task(log_msg(common_logger,log_messages=f' -- Inserted Transaction data to Data Foundation DB @ {now} | {datetime.timestamp(now)} -- '))       

                    elif self_transaction is not None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- Policy Transaction Record exists in Data foundation schema -- "))
                        aumine_policy_summary_dict['df_transaction_id'] = self_transaction.df_transaction_id
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Updated Transaction {source_system} Policy Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                        source_transaction_record.update(query_update_dict(obj=Transaction, dict=aumine_policy_summary_dict))
                        session.commit()
                        asyncio.create_task(log_msg(common_logger,log_messages=f' -- Updated Transaction data to Data Foundation DB @ {now} | {datetime.timestamp(now)} -- ')) 

                    if self_transaction or self_transaction is None:
                        df_policy_id = aumine_policy_summary_dict['df_policy_id']
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- Set is_latest and is_future tags for the specific df_policy_id : {df_policy_id}  to None -- "))
                        is_lastest_future_stmt = (update(Transaction)
                                        .where(Transaction.df_policy_id == df_policy_id)
                                        .values(is_latest_transaction=None, is_future_transaction=None)
                                        )
                        session.execute(is_lastest_future_stmt)
                        session.commit()

                        is_latest_max_transaction_id,is_future_max_transaction_id = latest_transaction_id(event=session,df_policy_id=df_policy_id)
                        
                        if is_latest_max_transaction_id:
                            asyncio.create_task(log_msg(common_logger,log_messages=f" -- Set is_latest flag to 1 for the latest source Transaction Id -- "))
                            is_latest_update_stmt = (update(Transaction)
                                            .where(and_(Transaction.df_policy_id == df_policy_id, 
                                                Transaction.effective_date <= func.current_date(),
                                                Transaction.source_transaction_id == is_latest_max_transaction_id))
                                            .values(is_latest_transaction=1)
                                            )
                            session.execute(is_latest_update_stmt)
                            session.commit()
                        
                        if is_future_max_transaction_id:
                            asyncio.create_task(log_msg(common_logger,log_messages=f" -- Set is_future flag to 1 for the latest source Transaction Id -- "))
                            is_future_update_stmt = (update(Transaction)
                                            .where(and_(Transaction.df_policy_id == df_policy_id, 
                                                Transaction.effective_date > func.current_date(),
                                                Transaction.source_transaction_id == is_future_max_transaction_id))
                                            .values(is_latest_transaction=1)
                                            )
                            session.execute(is_future_update_stmt)
                            session.commit()
                                                                                
                        session.commit()

                    if self_policy_version is None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- No Policy Version record was found in Data Foundation Schema -- "))
                        df_policy_id = aumine_policy_summary_dict['df_policy_id']
                        aumine_policy_summary_dict['policy_number'] = current_policy_number
                        aumine_policy_summary_dict['df_policy_number_version_id'] = generate_uuid(str(current_policy_number or '') +
                                                                                                  str(df_policy_id or '') +
                                                                                        str(df_source_system_id))                        
                    
                        policy_version = latest_policy_version(event=session,entity=Policy_Number_Version, df_policy_id=df_policy_id).first()
                        print("policy_version is : ", policy_version)
                        if policy_version is not None:
                            aumine_policy_summary_dict['policy_version_number'] = policy_version_increment(policy_version.policy_version_number)
                        else:
                            policy_version_number = None
                            aumine_policy_summary_dict['policy_version_number'] = policy_version_increment(policy_version_number)

                        aumine_policy_summary_dict['policy_effective_date'] = aumine_policy_summary_dict['effective_date']
                        aumine_policy_summary_dict['policy_expiration_date'] = aumine_policy_summary_dict['expiration_date']
                        aumine_policy_summary_dict['is_latest'] = 0

                        asyncio.create_task(log_msg(common_logger,log_messages=f'Insert {source_system} Policy Version Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                        print("Insert Aumine_AFF Policy Version Summary dict: ", aumine_policy_summary_dict )

                        session.add(Policy_Number_Version.from_dict(cls=Policy_Number_Version, d=aumine_policy_summary_dict))
                        session.commit()  

                        policy_version_latest = latest_policy_version(event=session,entity=Policy_Number_Version, df_policy_id=df_policy_id).first()
                        
                        #Set all records for the specific df_policy_id  to 0
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- Set all records for the specific df_policy_id : {df_policy_id}  to 0 -- "))
                        session.execute(update(Policy_Number_Version)
                                        .where(Policy_Number_Version.df_policy_id == df_policy_id)
                                        .values(is_latest=0)
                                        )
                        #Set only the latest record for the specific df_policy_id to 1
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- Set all records for the specific df_policy_id : {df_policy_id}  to 1 -- "))
                        session.execute(update(Policy_Number_Version)
                                        .where(Policy_Number_Version.df_policy_id == df_policy_id,Policy_Number_Version.policy_version_number == policy_version_latest.policy_version_number )
                                        .values(is_latest=1)
                                        )  
                        
                        session.commit()  

                            
                    elif self_policy_version is not None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f" -- Policy Version record was found in Data Foundation Schema -- "))

                        aumine_policy_summary_dict['df_policy_number_version_id'] = self_policy_version.df_policy_number_version_id
                        aumine_policy_summary_dict['policy_number'] = current_policy_number
                        aumine_policy_summary_dict['policy_version_number'] = self_policy_version.policy_version_number
                        aumine_policy_summary_dict['policy_effective_date'] = str(self_policy_version.policy_effective_date) if self_policy_version.policy_effective_date is not None else None
                        aumine_policy_summary_dict['policy_expiration_date'] = aumine_policy_summary_dict['expiration_date']
                        aumine_policy_summary_dict['is_latest'] = self_policy_version.is_latest              

                        asyncio.create_task(log_msg(common_logger,log_messages=f'Updated {source_system} Policy Version Summary dict:',api_response=convert_timestamps(aumine_policy_summary_dict)))
                        policy_version_record.update(query_update_dict(obj=Policy_Number_Version, dict=aumine_policy_summary_dict))
                        session.commit()

                    # Calling A producer API to send Id's to MDM RAW Layer
                    if source_agency_id is not None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f'source_agency_id contains a valid value : {source_agency_id}'))
                        #init_sp(source_system=source_system,identifier='Agency', id=source_agency_id)
                        msg_to_sqs(source_system=source_system,identifier='Agency', id=source_agency_id)
                        asyncio.create_task(log_msg(common_logger,log_messages=f'Successfully pushed the message to MDM Agency Consumer Lambda Queue : {source_agency_id}'))


                    if source_agency_contact_id is not None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f'source_agency_contact_id contains a valid value : {source_agency_contact_id}'))
                        #init_sp(source_system=source_system,identifier='Agency_Contact', id=source_agency_contact_id)
                        #msg_to_sqs(source_system=source_system,identifier='Agency_Contact', id=source_agency_contact_id)

                    if source_customer_id is not None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f'source_customer_id contains a valid value : {source_customer_id}'))
                        #init_sp(source_system=source_system,identifier='Customer', id=source_customer_id)
                        #msg_to_sqs(source_system=source_system,identifier='Customer', id=source_customer_id)

                    if source_customer_contact_id is not None:
                        asyncio.create_task(log_msg(common_logger,log_messages=f'source_customer_contact_id contains a valid value : {source_customer_contact_id}'))
                        #init_sp(source_system=source_system,identifier='Customer_Contact', id=source_customer_contact_id)  
                        #msg_to_sqs(source_system=source_system,identifier='Customer_Contact', id=source_customer_contact_id)    

            else:
                    error_log = {
                        "source_policy_id" : id,
                        "error_message" : "No record found after lookup" 
                    }
                    asyncio.create_task(log_msg(common_logger,log_messages=f'No record found after lookup - {error_log}'))
        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        return {'execution_time': end_timestamp - start_timestamp}
    except SQLAlchemyError as e:
        asyncio.create_task(log_msg(common_logger,log_messages='Error',api_response=e))
        session.rollback()
        raise e

def lookup_as400(config=None, id=None, engine=None):
    source_system = config['source_system']
    if source_system:
        if source_system.lower() == 'as400_aff':
            df = pd.read_sql(f"""
                SELECT * FROM (
                    SELECT
                        ROW_NUMBER() OVER (
                            PARTITION BY a.ACCOUNT_NO
                            ORDER BY c.ENDORSEMENT_SEQ_NO DESC
                        ) AS row_num,
                        a.ACCOUNT_NO AS policy_number,
                        c.ENDORSEMENT_NO AS endorsement_number,
                        c.ENDORSEMENT_SEQ_NO AS endorsement_sequence_number,
                        CASE
                            WHEN a.ENTITY_STATUS = 'A' THEN 'Active'
                            WHEN a.ENTITY_STATUS = 'T' THEN 'Terminated'
                            WHEN a.ENTITY_STATUS = 'R' THEN 'Active'
                            WHEN a.ENTITY_STATUS = 'P' THEN 'Pending'
                            WHEN a.ENTITY_STATUS = 'Q' THEN 'Active'
                            WHEN a.ENTITY_STATUS = 'Z' THEN 'Terminated'
                        END AS source_policy_status,
                        CASE
                            WHEN (a.PROFESSION_FLAG IN ('NUR','PAS','PNM','CNS','CRN') AND a.POLICY_TYPE = 'I') THEN '71a7b727-0787-4935-a0d0-0704dbcdd711'
                            WHEN (a.PROFESSION_FLAG IN ('NUR','PAS','PNM','CNS','CRN') AND a.POLICY_TYPE != 'I') THEN 'e71ba4fc-afa1-4396-a8ef-c7a22765adb8'
                            WHEN (a.PROFESSION_FLAG NOT IN ('NUR','PAS','PNM','CNS','CRN') AND a.POLICY_TYPE != 'I') THEN '2bd40533-6f37-4239-bfbf-8f22feddbb2e'
                            WHEN (a.PROFESSION_FLAG NOT IN ('NUR','PAS','PNM','CNS','CRN') AND a.POLICY_TYPE = 'I') THEN 'f84e4b29-8069-45b5-8e46-835cf590a569'
                            WHEN a.POLICY_TYPE = 'U' THEN '5b0f4296-767c-4196-bd10-d13d2fc68ad8'
                        END AS product_id,
                        TRIM(a.SUBPROD_NO) AS source_agency_id,
                        a.CUSTOMER_NO AS source_customer_id,
                        a.POLICY_EFF_DATE AS effective_date,
                        a.POLICY_EXP_DATE AS expiration_date,
                        b.POLICY_ISSUE_DATE AS policy_issue_date,
                        'AS400_AFFDEV' AS source_system
                    FROM dm_stelo.ADGDTADV_NSOCVGP a
                    INNER JOIN dm_stelo.ADGDTADV_ADGACIP b ON a.CUSTOMER_NO = b.CUSTOMER_NO
                    INNER JOIN dm_stelo.ADGDTADV_HCPCVEP c 
                        ON a.CUSTOMER_NO = c.CUSTOMER_NO 
                        AND a.POLICY_EFF_DATE = c.EFFECTIVE_DATE
                        AND a.POLICY_EXP_DATE = c.TERMIN_DATE
                    WHERE a.POLICY_EFF_DATE <= DATE_FORMAT(NOW(), '%Y%m%d')
                    AND a.POLICY_EXP_DATE > DATE_FORMAT(NOW(), '%Y%m%d')
                    AND a.ENTITY_STATUS = 'A'
                ) ab
                WHERE row_num = 1 AND {"source_customer_id" if "source_customer_id" in config else "policy_number"} = {id}
            """, con=engine)
    else:
        df=None

    if(len(df)>0):
        return df.to_dict('records')[0]
    else:
        return None
    
def consume_as400_lambda(config=None):
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)
    asyncio.create_task(log_msg(common_logger,log_messages=f'Processing to DB @ {now} | {datetime.timestamp(now)}'))
    try:
        logger.info(config)
        config_dicts = config if type(config) is dict else json.loads(str(config))
        if type(config_dicts) == list:
            pass
        else:
            config_dicts = [config_dicts]
        for config_dict in config_dicts:
            id = config_dict['source_customer_id'] if 'source_customer_id' in config_dict else config_dict['source_policy_id']
            source_system = config_dict['source_system'].lower()
            if(id):
                # fk_flag = 1
                print("Calling call_session_engine Function ")
                global session
                session = call_session_engine(database_name=pnc_db)

                as400_policy_summary_dict = lookup_as400(config=config_dict, id=id, engine=session)
                print(as400_policy_summary_dict)
        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        return {'execution_time': end_timestamp - start_timestamp}
    except SQLAlchemyError as e:
        # asyncio.create_task(log_msg(common_logger,log_messages='Error',api_response=e))
        session.rollback()
        raise e

def handle(event, context):
    start_time = time.time()
    for record in event['Records']:
        logger.info(record)
        payload = record["body"]
        # asyncio.run(consume_lambda(config=payload))
        consume_as400_lambda(config=payload)

    end_time = time.time()

    return {
        "execution_time_sec": end_time - start_time 
    }


#if __name__ == '__main__':
    #handle({'Records': [{'body': '{"source_policy_id":"1003093977","event_type":"INSERT/DELETE"}'}]}, None)
    # handle({'Records': [{'body': '[{ "source_policy_id": "2002569486", "parent_policy_id": "2002254485", "policy_type": "renewal"}]'}]}, None)
    # handle({'Records': [{'body': '[{"source_policy_id":"2002573640"},{"source_policy_id":"2002573647"},{"source_policy_id":"2002573649"}]'}]}, None)

















import os
import json
import time
import requests
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import text
from df_database_models.db_conn import get_rds_db_session, get_aumine_db_session
from df_database_models.models import Source_System, Line_Item, Line_Item_Type, Invoice, broker_portal_error_log, Customer, Customer_Contact, Carrier
from df_database_models.db_utils import  generate_uuid, convert_timestamps, generate_uuid, query_update_dict, get_record, call_sp
from secrets_manager import get_secret
from datetime import datetime
import pandas as pd
import asyncio
from adf_pyutils.clm_wrapper import common_logger

print("Class job is executing")

## Fetch SQS producer Parameters from aws secret manager
# sqs_producer_secret = json.loads(get_secret(
#          secret_name=os.environ["SQS_PRODUCER_SECRET_ID"], region_name=os.environ["AWS_REGION"]))
# sqs_producer_access_key = sqs_producer_secret["access_key"]
# sqs_policy_update_url = os.environ["SQS_POLICY_UPDATE_URL"]

async def log_msg(func,**kwargs):
    await asyncio.to_thread(func,**kwargs)

def call_session_engine(source_system=None, identifier=None):

    if source_system:
        rds_secret_name=os.environ["RDS_SECRETS_MANAGER_ID"]
        region_name=os.environ["AWS_REGION"]
        rds_host_nm=os.environ['RDS_HOST']

        if identifier == 'ref':
            rds_db_nm=os.environ['RDS_REF_DB_NAME']
        elif identifier == 'raw':
            rds_db_nm=os.environ['RDS_RAW_DB_NAME']
        elif identifier == 'refined':
            rds_db_nm=os.environ['RDS_REFINED_DB_NAME']
        else:
            rds_db_nm=os.environ['RDS_DB_NAME']
            

        if source_system.lower() == '':#Type of system to enter is as400 has types
            #Calling the as400 engine to establish a connection to PAS Source System - AS400

            as400_secret_name=os.environ[""]#enter secret manager id
            as400_engine=get_as400_db_session(as400_secret_name, region_name)

        elif source_system.lower() == '':
            #Calling the as400 engine to establish a connection to PAS Source System - AS400
            as400_secret_name=os.environ[""]#enter secret manager id
            as400_engine=get_as400_db_session(as400_secret_name, region_name)

        #Calling the Db session Object to establish a connection to Data Foundation Schema
        session=get_rds_db_session(rds_secret_name,region_name,rds_host_nm,rds_db_nm)

        return session, as400_engine

def lookup_as400(config=None, id=None):
    source_system = config['source_system']
    if source_system:
        if source_system.lower() in []:# Add source system
            df = pd.read_sql(f"""
                    SELECT MCCR_COMPANY_CODE AS source_carrier_id
                    ,COFL01 AS carrier_name
                    ,'{source_system}' AS source_system
                    FROM ADGDTAPR.NSPSRCP
                    WHERE MCCR_COMPANY_CODE = {id} 
                    """, con=as400_engine)
        else:
            df=None
    else:
        df=None

    if(len(df)>0):
        return df.to_dict('records')[0]
    else:
        return None

# Main function to process incoming configuration data
async def consume_lambda(config=None):
    asyncio.create_task(log_msg(common_logger,log_messages='consume lambda function invoking'))
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)
    asyncio.create_task(log_msg(common_logger,log_messages=f'Processing to DB @ {now} | {datetime.timestamp(now)}'))

    try:
        asyncio.create_task(log_msg(common_logger,log_messages='Config',api_response=convert_timestamps(config)))
        config_dicts = config if type(config) is dict else json.loads(str(config))
        if type(config_dicts) == list:
            pass
        else:
            config_dicts = [config_dicts] # Ensure config_dicts is a list
        for config_dict in config_dicts:
            carrier_id = config_dict['Carrier'] # Get the carrier from config data 
            source_system = config_dict['source_system'].lower()
            if(id):
                fk_flag = 1
                print("Calling call_session_engine Function")
                global session, as400_engine
                session, as400_engine = call_session_engine(source_system=source_system)

                as400_carrier_summary_dict = lookup_as400(config_dict, carrier_id) #define dict for lookup data
                
                if(as400_carrier_summary_dict):
                    asyncio.create_task(log_msg(common_logger,log_messages=f'Initial {source_system} Carrier Summary dict:',api_response=convert_timestamps(as400_carrier_summary_dict)))

                    #Fetch Source SyStem Id from Data Foundation
                    source_system_record = (query.first() if (query := get_record(session,model=Source_System,column_name='source_system',value=source_system)) is not None else None)
                    if source_system_record:
                        as400_carrier_summary_dict['df_source_system_id'] = source_system_record.df_source_system_id

                    #Fetch LineItem Type Id from Data Foundation
                    carrier_record = (query.first() if (query := get_record(session,model=Carrier,column_name='source_carrier_id',value = carrier_id)) is not None else None)
                    self_carrier = (carrier_record.first() if carrier_record is not None else None)
                    
                    if self_carrier is None:
                        asyncio.create_task(log_msg(common_logger,log_messages='Customer does not exist in Data Foundation'))
                        as400_carrier_summary_dict['df_carrier_id'] = generate_uuid(
                            str(as400_carrier_summary_dict['source_carrier_id'] or '') + 
                            str(as400_carrier_summary_dict['df_source_system_id'] or ''), 
                        )
                        session.add(Carrier.from_dict(cls = Carrier, d = as400_carrier_summary_dict))
                        session.commit()
                        fk_flag = 0
                        asyncio.create_task(log_msg(common_logger,log_messages='Inserted carrier {carrier_id}'))
                    else:
                        asyncio.create_task(log_msg(common_logger,log_messages='Carrier exists in Data Foundation'))
                        carrier_record.update(query_update_dict( obj = Carrier, dict = as400_carrier_summary_dict))
                        session.commit()

                    error_log = {
                        "df_line_item_id" : id,
                        "error_message" : "No record found after lookup" 
                    }
                    asyncio.create_task(log_msg(common_logger,log_messages='No record found after lookup'))
        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        asyncio.create_task(log_msg(common_logger,log_messages=f'execution_time: {end_timestamp} - {start_timestamp}'))
    except SQLAlchemyError as e:
        asyncio.create_task(log_msg(common_logger,log_messages='Error',api_response=e))
        session.rollback()
        raise e


def handle(event, context):
    start_time = time.time()
    print("Handle function is called")
    for record in event['Records']:
        payload = record["body"]
        asyncio.run(consume_lambda(config=payload))
    end_time = time.time()
    return {
        "execution_time_sec": end_time - start_time 
    }

if __name__ == '__main__':
    handle({'Records': [{'body': { "Carrier": "CARR67890", "source_system": "as400", "carrier_name": "ABC Insurance", "carrier_type": "Health" }}]}, None)
