import os
import json
import time
from datetime import datetime
import pandas as pd
import asyncio
from sqlalchemy.exc import SQLAlchemyError

from df_database_models.db_conn import get_rds_db_session, get_as400_db_session
from df_database_models.models import (
    Source_System, Payment, Payment_Type, Payment_Status, Invoice,
    broker_portal_error_log
)
from df_database_models.db_utils import (
    generate_uuid, convert_timestamps, query_update_dict, get_record
)
from secrets_manager import get_secret
from adf_pyutils.clm_wrapper import common_logger

print("Payment job is executing")

async def log_msg(func, **kwargs):
    await asyncio.to_thread(func, **kwargs)

def call_session_engine(source_system=None, identifier=None):
    rds_secret_name = os.environ["RDS_SECRETS_MANAGER_ID"]
    region_name = os.environ["AWS_REGION"]
    rds_host_nm = os.environ['RDS_HOST']

    if identifier == 'ref':
        rds_db_nm = os.environ['RDS_REF_DB_NAME']
    elif identifier == 'raw':
        rds_db_nm = os.environ['RDS_RAW_DB_NAME']
    elif identifier == 'refined':
        rds_db_nm = os.environ['RDS_REFINED_DB_NAME']
    else:
        rds_db_nm = os.environ['RDS_DB_NAME']

    as400_engine = None
    if source_system and source_system.lower() in ['as400_aff', 'as400_aum']:
        as400_secret_name = os.environ.get(source_system.lower())
        if as400_secret_name:
            as400_engine = get_as400_db_session(as400_secret_name, region_name)

    session = get_rds_db_session(rds_secret_name, region_name, rds_host_nm, rds_db_nm)
    return session, as400_engine

def lookup_as400_payment(config=None, id=None):
    source_system = config['source_system']
    if source_system:
        if source_system.lower() in ['as400_aff','as400_aum']:
            df = pd.read_sql(f"""
                SELECT 
                ar.customer_number || '-' || ar.effective_date || '-' || cast(ar.invoice_no AS varchar(10)) AS source_invoice_id
                ,p.source_payment_type
                -- ,NULL AS source_payment_status
                ,CASE WHEN ar.due_amount = 0 THEN ar.amount_paid ELSE NULL END AS payment_amount
                ,p.payment_date
                ,'{source_system}' AS source_system
                FROM 
                (SELECT  ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0') AS customer_number,INVOICE_NO
                ,MAX(CASE	WHEN length(trim(CASH_DATE_6)) = 1 THEN NULL
                        WHEN length(trim(CASH_DATE_6)) =  5 THEN '20'||substring(trim(CASH_DATE_6),4,2) || '0' ||
                        substring(trim(CASH_DATE_6),1,1) || substring(trim(CASH_DATE_6),2,2)   
                        ELSE '20'||substring(trim(CASH_DATE_6),5,2) || 
                        substring(trim(CASH_DATE_6),1,2) || substring(trim(CASH_DATE_6),3,2) 
                        END) AS payment_date 
                ,MAX(PAYMENT_TYPE) AS source_payment_type
                FROM ADGDTAPR."U.PAYMNT" p 
                GROUP BY ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0'),INVOICE_NO ) AS p 
                INNER JOIN 
                (
                SELECT customer_number,invoice_no,CASE	WHEN length(trim(EFFECTIVE_DATE_6)) = 1 THEN NULL
                        WHEN length(trim(EFFECTIVE_DATE_6)) =  5 THEN '20'||substring(trim(EFFECTIVE_DATE_6),4,2) || '0' ||
                        substring(trim(EFFECTIVE_DATE_6),1,1) || substring(trim(EFFECTIVE_DATE_6),2,2)   
                        ELSE '20'||substring(trim(EFFECTIVE_DATE_6),5,2) || 
                        substring(trim(EFFECTIVE_DATE_6),1,2) || substring(trim(EFFECTIVE_DATE_6),3,2) 
                        END AS effective_date ,due_amount,amount_paid FROM
                        (
                SELECT ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0') AS customer_number,INVOICE_NO ,EFFECTIVE_DATE_6
                ,SUM((PREMIUM+AMOUNT_ASSURED_PAID) - (CASH_ALLOCATED+RETURN_PREMIUM_CHG)) AS due_amount
                ,SUM(PREMIUM) AS amount_paid
                FROM ADGDTAPR."U.ARFILE"
                GROUP BY ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0') ,INVOICE_NO,EFFECTIVE_DATE_6
                ) WHERE due_amount = 0
                ) ar 
                ON ar.customer_number = p.customer_number AND p.invoice_no = ar.invoice_no
                """, con = as400_engine)
        else:
            df = None
    else:
        df = None

    if df is not None and len(df) > 0:
        return df.to_dict('records')[0]
    else:
        return None


async def consume_payment(config=None):
    asyncio.create_task(log_msg(common_logger, log_messages='consume payment lambda invoked'))
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)

    try:
        config_dict = config if isinstance(config, dict) else json.loads(str(config))
        if isinstance(config_dict, list):
            configs = config_dict
        else:
            configs = [config_dict]

        for config in configs:
            payment_id = config.get("Payment")
            source_system = config.get("source_system", "").lower()
            global session, as400_engine
            session, as400_engine = call_session_engine(source_system=source_system)

            as400_payment_dict = lookup_as400_payment(config, payment_id)
            if as400_payment_dict:
                # Source System FKs
                source_system_record = (query.first() if (query := get_record(session, Source_System, "source_system", source_system)) else None)
                if source_system_record:
                    as400_payment_dict['df_source_system_id'] = source_system_record.df_source_system_id

                # Payment_Type FK
                payment_type_record = (query.first() if (query := get_record(session, Payment_Type, "payment_type", as400_payment_dict['source_payment_type'])) else None)
                if payment_type_record:
                    as400_payment_dict['df_payment_type_id'] = payment_type_record.df_payment_type_id

                # Payment_Status FK
                payment_status_record = (query.first() if (query := get_record(session, Payment_Status, "payment_status", as400_payment_dict['source_payment_status'])) else None)
                if payment_status_record:
                    as400_payment_dict['df_payment_status_id'] = payment_status_record.df_payment_status_id

                # Invoice FK 
                if config.get("Invoice"):
                    invoice_record = (query.first() if (query := get_record(session, Invoice, "source_invoice_id", config["Invoice"])) else None)
                    if invoice_record:
                        as400_payment_dict['df_invoice_id'] = invoice_record.df_invoice_id

                # Insert or update
                payment_record = (query.first() if (query := get_record(session, Payment, "source_payment_id", payment_id)) else None)
                if payment_record is None:
                    as400_payment_dict['df_payment_id'] = generate_uuid(payment_id + source_system)
                    session.add(Payment.from_dict(cls=Payment, d=as400_payment_dict))
                    asyncio.create_task(log_msg(common_logger, log_messages=f'Inserted Payment {payment_id}'))
                else:
                    payment_record.update(query_update_dict(Payment, as400_payment_dict))
                    asyncio.create_task(log_msg(common_logger, log_messages=f'Updated Payment {payment_id}'))

                session.commit()

        now = datetime.now()
        end_timestamp = datetime.timestamp(now)
        asyncio.create_task(log_msg(common_logger,log_messages=f'execution_time: {end_timestamp} - {start_timestamp}'))
    except SQLAlchemyError as e:
        asyncio.create_task(log_msg(common_logger,log_messages='Error',api_response=e))
        session.rollback()
        raise e


def handle(event, context):
    start_time = time.time()
    for record in event['Records']:
        payload = record["body"]
        asyncio.run(consume_payment(config=payload))
    end_time = time.time()
    return {"execution_time_sec": end_time - start_time}

if __name__ == "__main__":
    handle({"Records": [{"body": '{ "Payment": "PAY123", "source_system": "as400_aff", "Invoice": "INV123"}'}]}, None)
