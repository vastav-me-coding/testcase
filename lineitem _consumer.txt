import os
import json
import time
import pandas as pd
import asyncio
from datetime import datetime
from sqlalchemy.exc import SQLAlchemyError

from df_database_models.db_conn import get_rds_db_session, get_as400_db_session
from df_database_models.models import Line_Item, Line_Item_Type, Invoice, Source_System
from df_database_models.db_utils import (
    generate_uuid, convert_timestamps, query_update_dict, get_record, multi_filter_get_record
)
from secrets_manager import get_secret
from adf_pyutils.clm_wrapper import common_logger

# --- Env DB Configs ---
pnc_db = os.environ['RDS_DB_NAME']
ref_db = os.environ['RDS_REF_DB_NAME']
mdm_raw_db = os.environ['RDS_RAW_DB_NAME']
mdm_refined_db = os.environ['RDS_REFINED_DB_NAME']


# --- Async Logger Wrapper ---
async def log_msg(func, **kwargs):
    await asyncio.to_thread(func, **kwargs)


# --- Session/Engine Initializer ---
def call_session_engine(source_system=None, database_name=None):

    rds_secret_name = os.environ["RDS_SECRETS_MANAGER_ID"]
    region_name = os.environ["AWS_REGION"]
    rds_host_nm = os.environ['RDS_HOST']

    if database_name == 'ref_data':
        rds_db_nm = os.environ['RDS_REF_DB_NAME']
    elif database_name == 'mdm_raw':
        rds_db_nm = os.environ['RDS_RAW_DB_NAME']
    elif database_name == 'mdm_refined':
        rds_db_nm = os.environ['RDS_REFINED_DB_NAME']
    else:
        rds_db_nm = os.environ['RDS_DB_NAME']

    if source_system and source_system.lower() == 'as400_aff':
        as400_secret_name = os.environ["AS400_AFF_SECRETS_MANAGER_ID"]
        as400_engine = get_as400_db_session(as400_secret_name, region_name)
        return as400_engine

    elif source_system and source_system.lower() == 'as400_kkins':
        as400_secret_name = os.environ["AS400_KKINS_SECRETS_MANAGER_ID"]
        as400_engine = get_as400_db_session(as400_secret_name, region_name)
        return as400_engine

    if database_name:
        session = get_rds_db_session(rds_secret_name, region_name, rds_host_nm, rds_db_nm)
        return session


# --- Global Sessions ---
session = call_session_engine(database_name=pnc_db)
as400_engine_aff = call_session_engine(source_system='as400_aff')
as400_engine_kkins = call_session_engine(source_system='as400_kkins')


# --- Lookup LineItem from AS400 ---
def lookup_as400_lineitem(config=None, id=None):
    source_system = config.get("source_system")
    df = None

    if source_system and source_system.lower() == "as400_aff":
        df = pd.read_sql(f"""
            SELECT DISTINCT 
                da.customer_number || '-' || da.effective_date || '-' || cast(da.invoice_no AS varchar(10)) AS source_invoice_id,
                cov.BASE_PREMIUM,
                cov.TAX,
                da.commission_amount
            FROM (
                SELECT DISTINCT 
                    ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0') AS customer_number,
                    INVOICE_NO,
                    SUM(PREMIUM) AS premium,
                    SUM(commission_amount) AS commission_amount,
                    CASE    
                        WHEN length(trim(EFFECTIVE_DATE_6)) = 1 THEN NULL
                        WHEN length(trim(EFFECTIVE_DATE_6)) = 5 THEN 
                            '20'||substring(trim(EFFECTIVE_DATE_6),4,2) || '0' || substring(trim(EFFECTIVE_DATE_6),1,1) || substring(trim(EFFECTIVE_DATE_6),2,2)   
                        ELSE 
                            '20'||substring(trim(EFFECTIVE_DATE_6),5,2) || substring(trim(EFFECTIVE_DATE_6),1,2) || substring(trim(EFFECTIVE_DATE_6),3,2) 
                    END AS effective_date 
                FROM ADGDTAPR."U.ARFILE"
                GROUP BY ASSURED_NO || LPAD(ASSURED_SUB_NO,3,'0'), INVOICE_NO, EFFECTIVE_DATE_6
            ) AS da
            INNER JOIN (
                SELECT CUSTOMER_NO, EFFECTIVE_DATE, ACCOUNT_NO, BASE_PREMIUM, TOTAL_PREMIUM,
                       POLICY_EFF_DATE, INVOICE_NO, (STATE_TAX + TOWN_TAX + COUNTY_TAX) AS tax, LAST_PAYMENT_DATE
                FROM ADGDTAPR.NSOCVGP
            ) AS cov 
            ON cov.CUSTOMER_NO = da.customer_number 
               AND cov.EFFECTIVE_DATE = da.effective_date
               AND cov.invoice_no = da.invoice_no
        """, con=as400_engine)

    elif source_system and source_system.lower() == "as400_kkins":
        # Example query for kkins, adjust as per schema
        df = pd.read_sql(f"""
            SELECT DISTINCT 
                INVOICE_NO AS source_invoice_id,
                BASE_PREMIUM,
                TAX,
                COMMISSION_AMOUNT
            FROM KKINSDB.KKLINEITEMS
            WHERE INVOICE_NO = '{id}'
        """, con=as400_engine)

    if df is not None and len(df) > 0:
        return df.to_dict("records")[0]
    return None


# --- Core Lambda Consumer ---
async def consume_lambda(config=None):
    asyncio.create_task(log_msg(common_logger, log_messages="consume lambda function invoking"))
    now = datetime.now()
    start_timestamp = datetime.timestamp(now)
    asyncio.create_task(log_msg(common_logger, log_messages=f"Processing to DB @ {now} | {start_timestamp}"))

    try:
        asyncio.create_task(log_msg(common_logger, log_messages="Config", api_response=convert_timestamps(config)))
        config_dicts = config if isinstance(config, dict) else json.loads(str(config))
        if not isinstance(config_dicts, list):
            config_dicts = [config_dicts]

        for config_dict in config_dicts:
            line_item_id = config_dict.get("line_item")
            source_system = config_dict.get("source_system").lower()

            global as400_engine
            if source_system == "as400_aff":
                as400_engine = as400_engine_aff
            elif source_system == "as400_kkins":
                as400_engine = as400_engine_kkins

            as400_lineitem_dict = lookup_as400_lineitem(config_dict, line_item_id)

            if as400_lineitem_dict:
                asyncio.create_task(log_msg(common_logger, log_messages=f"Initial {source_system} LineItem dict:", api_response=convert_timestamps(as400_lineitem_dict)))

                # --- Map Source System ---
                source_system_record = (
                    query.first() if (query := multi_filter_get_record(
                        session, model=Source_System, source_system=source_system)) is not None else None
                )
                if source_system_record:
                    as400_lineitem_dict["df_source_system_id"] = source_system_record.df_source_system_id

                # --- Map Invoice ---
                invoice_record = get_record(
                    session, model=Invoice,
                    column_name="source_invoice_id",
                    value=as400_lineitem_dict["source_invoice_id"],
                    df_source_system_id=as400_lineitem_dict["df_source_system_id"]
                )
                self_invoice = invoice_record.first() if invoice_record else None

                if not self_invoice:
                    as400_lineitem_dict["df_invoice_id"] = generate_uuid(
                        str(as400_lineitem_dict["source_invoice_id"]), 
                        as400_lineitem_dict["df_source_system_id"]
                    )
                else:
                    as400_lineitem_dict["df_invoice_id"] = self_invoice.df_invoice_id

                # --- Map LineItem ---
                lineitem_record = multi_filter_get_record(
                    session, model=Line_Item,
                    df_line_item_id=line_item_id,
                    source_system_id=as400_lineitem_dict["df_source_system_id"]
                )
                self_lineitem = lineitem_record.first() if lineitem_record else None

                if not self_lineitem:
                    as400_lineitem_dict["df_line_item_id"] = generate_uuid(
                        str(as400_lineitem_dict["source_invoice_id"]) + str(as400_lineitem_dict["df_source_system_id"]),
                        as400_lineitem_dict["df_source_system_id"]
                    )
                    session.add(Line_Item.from_dict(cls=Line_Item, d=as400_lineitem_dict))
                    asyncio.create_task(log_msg(common_logger, log_messages=f"Inserted new LineItem {line_item_id}"))
                else:
                    self_lineitem.update(query_update_dict(obj=Line_Item, dict=as400_lineitem_dict))
                    asyncio.create_task(log_msg(common_logger, log_messages=f"Updated LineItem {line_item_id}"))

                session.commit()
            else:
                error_log = {"df_line_item_id": line_item_id, "error_message": "No record found after lookup"}
                asyncio.create_task(log_msg(common_logger, log_messages=f"No record found for LineItem {line_item_id}", api_response=error_log))

        end_timestamp = datetime.timestamp(datetime.now())
        asyncio.create_task(log_msg(common_logger, log_messages=f"execution_time: {end_timestamp - start_timestamp}"))

    except SQLAlchemyError as e:
        session.rollback()
        asyncio.create_task(log_msg(common_logger, log_messages="DB Error", api_response=str(e)))
        raise e


# --- Lambda Handler ---
def handle(event, context):
    start_time = time.time()
    print("Handle function is called")
    for record in event['Records']:
        payload = record["body"]
        asyncio.run(consume_lambda(config=payload))
    return {"execution_time_sec": time.time() - start_time}


if __name__ == "__main__":
    handle({"Records": [{"body": '{"line_item":"12345","source_system":"as400_aff"}'}]}, None)
